syntax = "proto3";
package grpc.proxy.v2;

import "google/protobuf/duration.proto";
import "google/api/annotations.proto";

option go_package = "grpc/proxy/v2";

enum LoadTestType {
    LOAD_TEST_TYPE_UNSPECIFIED = 0;
    LOAD_TEST_TYPE_JMETER = 1;
    LOAD_TEST_TYPE_FAKE = 2;
    LOAD_TEST_TYPE_LOCUST = 3;
}

enum LoadTestPhase {
    LOAD_TEST_PHASE_UNSPECIFIED = 0;
    LOAD_TEST_PHASE_CREATING = 1;
    LOAD_TEST_PHASE_STARTING = 2;
    LOAD_TEST_PHASE_RUNNING = 3;
    LOAD_TEST_PHASE_FINISHED = 4;
    LOAD_TEST_PHASE_ERRORED = 5;
}

message LoadTestStatus {
    // Name is the load test name that always matches k8s namespace where it runs
    string name = 1;
    int32 distributed_pods = 2;
    LoadTestPhase phase = 3;
    map<string, string> tags = 4;
    bool has_env_vars = 5;
    bool has_test_data = 6;
    LoadTestType type = 7;
}

message GetRequest {
    string name = 1;
}

message GetResponse {
    LoadTestStatus load_test_status = 1;
}

message CreateRequest {
    // EnvVars <WHAT?>.
    // When used via REST gateway must be base64-encoded to avoid issues with JSON.
    bytes env_vars = 1;
    // TestData <WHAT?>.
    // When used via REST gateway must be base64-encoded to avoid issues with JSON.
    bytes test_data = 2;
    // TestFile <WHAT?>.
    // When used via REST gateway must be base64-encoded to avoid issues with JSON.
    bytes test_file = 3;

    int32 distributed_pods = 4;
    LoadTestType type = 5;
    bool overwrite = 6;
    string target_url = 7;
    // Tags is a simple set of key:value that allows to tag tests for further filtering.
    map<string, string> tags = 8;
    // Duration allows to <WHAT?>.
    // When used via gRPC REST gateway this value must be compatible with https://golang.org/pkg/time/#ParseDuration
    google.protobuf.Duration duration = 9;
}

message CreateResponse {
    LoadTestStatus load_test_status = 1;
}

message ListRequest {
    int64 page_size = 1;
    string page_token = 2;
    // See openapi-v3 spec regarding deepObject style to describe objects as query string:
    // https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#style-examples
    // Note: This works but will not be generated in the swagger.json file as it is not openapi-v2 compliant.
    map<string, string> tags = 3;
    LoadTestPhase phase = 4;
}

message ListResponse {
    int64 page_size = 1;
    string next_page_token = 2;
    int64 remain = 3;
    repeated LoadTestStatus load_test_statuses = 4;
}

message DeleteRequest {
    string name = 1;
}

message DeleteResponse {
}

message GetLogsRequest {
    string name = 1;
}

message GetLogsResponse {
    string logs = 1;
}

service LoadTestService {
    // Get returns load test by given name
    rpc Get (GetRequest) returns (GetResponse) {
        option (google.api.http) = {
            get: "/v2/load-test/{name}"
        };
    }
    // Create creates new load test
    // TODO: move curl example to README: curl -XPOST -d '{"envVars": "'"$( base64 /path/to/file)"'", "testData": "'"$( base64 /path/to/file)"'", "testFile": "'"$( base64 /path/to/file)"'", "distributedPods": 3, "type": "LOAD_TEST_TYPE_FAKE", "overwrite": true, "targetUrl": "http://example.com", "tags": {"foo": "bar", "baz": "qux"}, "duration": "123s"}' "http://localhost:8090/v2/load-test"
    rpc Create (CreateRequest) returns (CreateResponse) {
        option (google.api.http) = {
            post: "/v2/load-test"
            body: "*"
        };
    }
    // List searches and returns load tests by given filters
    // Example: curl -X GET "http://localhost:8090/v2/load-test?page_size=5&tags[department]=platform&tags[team]=kangal"
    rpc List (ListRequest) returns (ListResponse) {
        option (google.api.http) = {
            get: "/v2/load-test"
        };
    }

    rpc Delete (DeleteRequest) returns (DeleteResponse) {
        option (google.api.http) = {
            delete: "/v2/load-test/{name}"
        };
    }

    rpc GetLogs (GetLogsRequest) returns (GetLogsResponse) {
        option (google.api.http) = {
            get: "/v2/load-test/{name}/logs"
        };
    }
}
